class blModel(nn.Module):

    def __init__(self, num_classes=2, input_dim = 3):
        super(blModel, self).__init__()
        
        self.baseModel = nn.Sequential(
            nn.Conv2d(in_channels=input_dim, out_channels=8, kernel_size=3,stride = 1,padding="same"),
            nn.BatchNorm2d(8),
            nn.ReLU(inplace=True)
            
        )

        self.shortBranch = nn.Sequential()
        
        self.longBranch = nn.Sequential(
            nn.Conv2d(in_channels=8, out_channels=8, kernel_size=3,padding='same'),
            nn.BatchNorm2d(8),
            nn.ReLU(inplace=True),
            
            nn.Conv2d(in_channels=8, out_channels=8, kernel_size=3,padding='same'),
            nn.BatchNorm2d(8),
            nn.ReLU(inplace=True),

            nn.MaxPool2d(kernel_size=3, stride=2, padding = 1),
            

        )

        self.residualBranch = nn.Sequential(
            nn.Conv2d(in_channels=8, out_channels=8, kernel_size=1, stride = 2)
        )

        self.denseOut = nn.Sequential(
            nn.Conv2d(in_channels=8, out_channels=8, kernel_size=3,padding='same'),
            nn.BatchNorm2d(8),
            nn.ReLU(inplace=True),
            
            nn.Flatten(),
            nn.Dropout(0.5),
            nn.Linear(in_features=129032, out_features=num_classes),
            nn.Sigmoid()
        )

                
    def forward(self, X):
        X = X *1
        X = self.baseModel(X)
        residual = X
        residual = self.residualBranch(residual)
        X = self.longBranch(X)
        X = X + residual
        X =  self.denseOut(X)
        return X